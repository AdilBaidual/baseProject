version: "3.8"

services:
  api:
    container_name: base_project_api
    build:
      context: .
    env_file:
      - .env
    ports:
      - "${HTTP_SERVER_PORT}:${HTTP_SERVER_PORT}"
      - "${GRPC_SERVER_PORT}:${GRPC_SERVER_PORT}"
    networks:
      - base_project_network
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: base_project_postgres
    image: postgres:alpine
    restart: unless-stopped
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - base_project_network
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 5

  goose:
    depends_on:
      postgres:
        condition: service_healthy
    build:
      context: db/migrations
      dockerfile: Dockerfile
    command: sh -c "goose -dir=/app postgres postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=${POSTGRES_SSLMODE} up"
    volumes:
      - ./db:/app
    env_file:
      - .env
    networks:
      - base_project_network

  jaeger:
    container_name: base_project_jaeger
    image: jaegertracing/all-in-one
    ports:
      - "${JAEGER_AGENT_PORT}:${JAEGER_AGENT_PORT}"
      - "16686:16686"
    networks:
      - base_project_network

volumes:
  postgres_data:
  redis_data:

networks:
  base_project_network:
    driver: bridge
